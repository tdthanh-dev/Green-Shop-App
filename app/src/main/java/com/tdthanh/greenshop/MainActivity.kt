package com.tdthanh.greenshop

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.icons.outlined.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.google.android.play.core.splitinstall.SplitInstallManagerFactory
import com.tdthanh.greenshop.data.ProductRepository
import com.tdthanh.greenshop.feature.FeatureDownloadManager
import com.tdthanh.greenshop.feature.DynamicFeatureEntryFactory
import com.tdthanh.greenshop.model.Product
import com.tdthanh.greenshop.ui.screens.*
import com.tdthanh.greenshop.ui.theme.GreenShopTheme
import com.tdthanh.greenshop.viewmodel.GreenShopViewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        
        setContent {
            GreenShopTheme {
                GreenShopApp()
            }
        }
    }
}

@Composable
fun GreenShopApp() {
    val navController = rememberNavController()
    val viewModel: GreenShopViewModel = viewModel()
    val navBackStackEntry by navController.currentBackStackEntryAsState()
    val currentRoute = navBackStackEntry?.destination?.route

    // Danh s√°ch c√°c route hi·ªÉn th·ªã bottom navigation
    val bottomNavRoutes = listOf("home", "categories", "cart", "profile")
    val showBottomNav = currentRoute in bottomNavRoutes

    Scaffold(
        modifier = Modifier.fillMaxSize(),
        bottomBar = {
            if (showBottomNav) {
                BottomNavigationBar(
                    navController = navController,
                    currentRoute = currentRoute ?: "home"
                )
            }
        }
    ) { innerPadding ->
        GreenShopNavHost(
            navController = navController,
            viewModel = viewModel,
            modifier = Modifier.padding(innerPadding)
        )
    }
}

@Composable
fun GreenShopNavHost(
    navController: NavHostController,
    viewModel: GreenShopViewModel,
    modifier: Modifier = Modifier
) {
    NavHost(
        navController = navController,
        startDestination = "home",
        modifier = modifier
    ) {        composable("home") {
            HomeScreen(
                viewModel = viewModel,
                onProductClick = { product ->
                    navController.navigate("product_detail/${product.id}")
                },
                onFeaturesClick = {
                    navController.navigate("features")
                }
            )
        }
        
        composable("categories") {
            CategoryScreen(
                viewModel = viewModel,
                onProductClick = { product ->
                    navController.navigate("product_detail/${product.id}")
                }
            )
        }
        
        composable("cart") {
            CartScreen(
                viewModel = viewModel
            )
        }
        
        composable("profile") {
            ProfileScreen(
                onFeaturesClick = {
                    navController.navigate("features")
                }
            )
        }
          composable("features") {
            FeaturesScreen(
                onNavigateBack = {
                    navController.popBackStack()
                },
                onNavigateToFeature = { featureName ->
                    when (featureName) {
                        "featureanalytics" -> navController.navigate("analytics")
                        "featurepremium" -> navController.navigate("premium")
                        "featureadvancedsearch" -> navController.navigate("advanced_search")
                    }
                }
            )
        }
          composable("cart") {
            CartScreen(
                viewModel = viewModel
            )
        }
        
        composable("product_detail/{productId}") { backStackEntry ->
            val productId = backStackEntry.arguments?.getString("productId")
            val product = ProductRepository.getProductById(productId ?: "")
            
            if (product != null) {
                ProductDetailScreen(
                    product = product,
                    viewModel = viewModel,
                    onBackClick = {
                        navController.popBackStack()
                    }
                )
            }
        }
          // Dynamic feature routes - load th·∫≠t s·ª± UI t·ª´ dynamic features
        composable("analytics") {
            LoadDynamicFeatureScreen(
                featureName = "featureanalytics",
                className = "com.tdthanh.greenshop.analytics.AnalyticsScreen",
                displayName = "Analytics",
                onNavigateBack = { navController.popBackStack() }
            )
        }
        
        composable("premium") {
            LoadDynamicFeatureScreen(
                featureName = "featurepremium", 
                className = "com.tdthanh.greenshop.premium.PremiumScreen",
                displayName = "Premium",
                onNavigateBack = { navController.popBackStack() }
            )
        }
        
        composable("advanced_search") {
            LoadDynamicFeatureScreen(
                featureName = "featureadvancedsearch",
                className = "com.tdthanh.greenshop.search.AdvancedSearchScreen", 
                displayName = "Advanced Search",
                onNavigateBack = { navController.popBackStack() }
            )
        }
    }
}

@Composable
fun LoadDynamicFeatureScreen(
    featureName: String,
    className: String,
    displayName: String,
    onNavigateBack: () -> Unit
) {
    val context = LocalContext.current
    val featureManager = remember { FeatureDownloadManager(context) }
    
    if (featureManager.isFeatureInstalled(featureName)) {
        // Th·ª≠ load UI th·ª±c t·∫ø t·ª´ dynamic feature
        val featureEntry = remember { DynamicFeatureEntryFactory.getEntryForFeature(featureName) }
        
        if (featureEntry != null) {
            // Load UI th·ª±c t·∫ø t·ª´ dynamic feature
            featureEntry.Content(onNavigateBack = onNavigateBack)
        } else {
            // Fallback to placeholder n·∫øu kh√¥ng load ƒë∆∞·ª£c
            DynamicFeatureLoadedScreen(displayName, onNavigateBack)
        }
    } else {
        // N·∫øu feature ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t
        FeatureNotInstalledScreen(displayName, onNavigateBack)
    }
}

@Composable
fun DynamicFeatureLoadedScreen(
    featureName: String,
    onNavigateBack: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.primaryContainer
            )
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    Icons.Default.Extension,
                    contentDescription = null,
                    modifier = Modifier.size(48.dp),
                    tint = MaterialTheme.colorScheme.primary
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "üéâ $featureName ƒë√£ t·∫£i th√†nh c√¥ng!",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Dynamic feature $featureName ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ v√† c√†i ƒë·∫∑t th√†nh c√¥ng. Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† UI c·ªßa feature n√†y.",
                    style = MaterialTheme.typography.bodyMedium,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onPrimaryContainer
                )
                Spacer(modifier = Modifier.height(16.dp))
                
                // M√¥ ph·ªèng feature content
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surface
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "üìä $featureName Content",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = when (featureName) {
                                "Analytics" -> "‚Ä¢ Th·ªëng k√™ doanh thu\n‚Ä¢ B√°o c√°o kh√°ch h√†ng\n‚Ä¢ Ph√¢n t√≠ch xu h∆∞·ªõng"
                                "Premium" -> "‚Ä¢ Gi·∫£m gi√° ƒë·∫∑c bi·ªát\n‚Ä¢ Giao h√†ng mi·ªÖn ph√≠\n‚Ä¢ H·ªó tr·ª£ VIP"
                                "Advanced Search" -> "‚Ä¢ T√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i\n‚Ä¢ T√¨m ki·∫øm b·∫±ng h√¨nh ·∫£nh\n‚Ä¢ AI g·ª£i √Ω s·∫£n ph·∫©m"
                                else -> "‚Ä¢ T√≠nh nƒÉng ƒë·∫∑c bi·ªát\n‚Ä¢ Ch·ª©c nƒÉng n√¢ng cao"
                            },
                            style = MaterialTheme.typography.bodyMedium
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(24.dp))
                Button(
                    onClick = onNavigateBack,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(Icons.Default.ArrowBack, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Quay l·∫°i")
                }
            }
        }
    }
}

@Composable
fun FeatureNotInstalledScreen(
    featureName: String,
    onNavigateBack: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.errorContainer
            )
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    Icons.Default.Extension,
                    contentDescription = null,
                    modifier = Modifier.size(48.dp),
                    tint = MaterialTheme.colorScheme.error
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "T√≠nh nƒÉng ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Vui l√≤ng t·∫£i xu·ªëng t√≠nh nƒÉng $featureName t·ª´ trang Qu·∫£n l√Ω t√≠nh nƒÉng tr∆∞·ªõc khi s·ª≠ d·ª•ng.",
                    style = MaterialTheme.typography.bodyMedium,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onErrorContainer
                )
                Spacer(modifier = Modifier.height(24.dp))
                Button(
                    onClick = onNavigateBack,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(Icons.Default.ArrowBack, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Quay l·∫°i")
                }
            }
        }
    }
}

@Composable
fun DynamicFeaturePlaceholder(
    featureName: String,
    onNavigateBack: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    Icons.Default.Extension,
                    contentDescription = null,
                    modifier = Modifier.size(48.dp),
                    tint = MaterialTheme.colorScheme.primary
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "$featureName Feature",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "T√≠nh nƒÉng n√†y ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ v√† s·∫µn s√†ng s·ª≠ d·ª•ng. UI dynamic feature ƒëang load...",
                    style = MaterialTheme.typography.bodyMedium,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                Spacer(modifier = Modifier.height(24.dp))
                Button(
                    onClick = onNavigateBack,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(Icons.Default.ArrowBack, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Quay l·∫°i")
                }
            }
        }
    }
}

// Data class cho navigation items
data class BottomNavItem(
    val title: String,
    val selectedIcon: androidx.compose.ui.graphics.vector.ImageVector,
    val unselectedIcon: androidx.compose.ui.graphics.vector.ImageVector,
    val route: String,
    val badgeCount: Int? = null
)

@Composable
fun BottomNavigationBar(
    navController: NavHostController,
    currentRoute: String,
    viewModel: GreenShopViewModel = viewModel()
) {
    val cartItems by viewModel.cartItems.collectAsStateWithLifecycle()
    
    val items = listOf(
        BottomNavItem(
            title = "Trang ch·ªß",
            selectedIcon = Icons.Filled.Home,
            unselectedIcon = Icons.Outlined.Home,
            route = "home"
        ),
        BottomNavItem(
            title = "Danh m·ª•c",
            selectedIcon = Icons.Filled.Category,
            unselectedIcon = Icons.Outlined.Category,
            route = "categories"
        ),
        BottomNavItem(
            title = "Gi·ªè h√†ng",
            selectedIcon = Icons.Filled.ShoppingCart,
            unselectedIcon = Icons.Outlined.ShoppingCart,
            route = "cart",
            badgeCount = if (cartItems.isNotEmpty()) viewModel.getCartItemCount() else null
        ),
        BottomNavItem(
            title = "H·ªì s∆°",
            selectedIcon = Icons.Filled.Person,
            unselectedIcon = Icons.Outlined.Person,
            route = "profile"
        )
    )

    NavigationBar(
        containerColor = MaterialTheme.colorScheme.surface,
        tonalElevation = 8.dp
    ) {
        items.forEach { item ->
            NavigationBarItem(
                icon = {
                    BadgedBox(
                        badge = {
                            if (item.badgeCount != null && item.badgeCount > 0) {
                                Badge {
                                    Text(
                                        text = item.badgeCount.toString(),
                                        style = MaterialTheme.typography.bodySmall
                                    )
                                }
                            }
                        }
                    ) {
                        Icon(
                            imageVector = if (currentRoute == item.route) {
                                item.selectedIcon
                            } else {
                                item.unselectedIcon
                            },
                            contentDescription = item.title
                        )
                    }
                },
                label = {
                    Text(
                        text = item.title,
                        style = MaterialTheme.typography.bodySmall
                    )
                },
                selected = currentRoute == item.route,
                onClick = {
                    if (currentRoute != item.route) {
                        navController.navigate(item.route) {
                            // Pop up to the start destination to avoid building up a large stack
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                            // Avoid multiple copies of the same destination when reselecting the same item
                            launchSingleTop = true
                            // Restore state when reselecting a previously selected item
                            restoreState = true
                        }
                    }
                },
                colors = NavigationBarItemDefaults.colors(
                    selectedIconColor = MaterialTheme.colorScheme.primary,
                    selectedTextColor = MaterialTheme.colorScheme.primary,
                    indicatorColor = MaterialTheme.colorScheme.primaryContainer,
                    unselectedIconColor = MaterialTheme.colorScheme.onSurfaceVariant,
                    unselectedTextColor = MaterialTheme.colorScheme.onSurfaceVariant
                )
            )
        }    }
}
